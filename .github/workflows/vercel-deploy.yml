name: Deploy to Vercel

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Vercel

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Audit dependencies
        run: npm audit --audit-level=high

      - name: Run tests
        run: npm run lint

      - name: Build project
        run: npm run build
        env:
          NODE_ENV: production
          WEBSITE_URL: ${{ secrets.WEBSITE_URL }}

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && '--prod' || '' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('ðŸš€ Preview')
            );

            if (botComment) {
               await github.rest.issues.updateComment({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 comment_id: botComment.id,
                 body: `ðŸš€ Preview deployment is ready!

                 **Preview URL:** ${{ steps.deploy.outputs.preview-url }}

                 This preview will be updated on each push to this PR.

                 ---

                 *This comment was automatically generated by the deployment workflow.*`
               });
            } else {
               await github.rest.issues.createComment({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 issue_number: context.issue.number,
                 body: `ðŸš€ Preview deployment is ready!

                 **Preview URL:** ${{ steps.deploy.outputs.preview-url }}

                 This preview will be updated on each push to this PR.

                 ---

                 *This comment was automatically generated by the deployment workflow.*`
                });
              }

      - name: Create GitHub Deployment
        id: create-deployment
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        env:
          PRODUCTION_URL: ${{ steps.deploy.outputs.production-url }}
          PREVIEW_URL: ${{ steps.deploy.outputs.preview-url }}
        with:
          script: |
            const core = require('@actions/core');
            try {
              const isProduction = process.env.GITHUB_REF === 'refs/heads/main';
              const environment = isProduction ? 'production' : 'preview';
              const deploymentUrl = isProduction ? process.env.PRODUCTION_URL : process.env.PREVIEW_URL;

              const { data: deployment } = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha,
                environment: environment,
                description: 'Deploy to Vercel',
                required_contexts: []
              });

              core.setOutput('deployment-id', deployment.id);
              core.setOutput('deployment-url', deploymentUrl);
              core.setOutput('environment', environment);
            } catch (error) {
              core.setFailed(`Failed to create deployment: ${error.message}`);
            }

      - name: Update deployment status
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            try {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: '${{ steps.create-deployment.outputs.deployment-id }}',
                state: 'success',
                target_url: '${{ steps.create-deployment.outputs.deployment-url }}',
                description: 'Deployment completed successfully'
              });
            } catch (error) {
              core.setFailed(`Failed to update deployment status: ${error.message}`);
            }
