name: Deploy to Vercel

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Vercel

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

       - name: Install dependencies
         run: npm ci

       - name: Audit dependencies
         run: npm audit --audit-level=high

       - name: Run tests
         run: npm run lint

       - name: Build project
         run: npm run build
         env:
           NODE_ENV: production
           WEBSITE_URL: ${{ secrets.WEBSITE_URL }}

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        id: deploy
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "Deploying to production..."
            vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            echo "Deploying preview..."
            vercel --token=${{ secrets.VERCEL_TOKEN }}
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('ðŸš€ Preview')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: `ðŸš€ Preview deployment is ready! 
                
                **Preview URL:** ${{ steps.deploy.outputs.url }}
                
                This preview will be updated on each push to this PR.
                
                ---
                
                *This comment was automatically generated by the deployment workflow.*`
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `ðŸš€ Preview deployment is ready! 
                
                **Preview URL:** ${{ steps.deploy.outputs.url }}
                
                This preview will be updated on each push to this PR.
                
                ---
                
                *This comment was automatically generated by the deployment workflow.*`
              });
            }

      - name: Update deployment status
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.url }}';

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.sha,
              state: 'success',
              target_url: deploymentUrl,
              description: 'Deployment completed successfully',
              environment: context.ref === 'refs/heads/main' ? 'Production' : 'Preview'
            });
